{"version":3,"sources":["constants.ts","components/cameras/CamerasListItem.tsx","components/toolbar/FacilitySelect.tsx","state/atoms.ts","components/cameras/CamerasList.tsx","components/cameras/Cameras.tsx","components/toolbar/Filters.tsx","components/toolbar/Toolbar.tsx","components/Header.tsx","components/notes/AddNotes.tsx","components/notes/NotesListItem.tsx","components/notes/NotesList.tsx","components/notes/Notes.tsx","components/WebRTCstream.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SeveritiesEnum","CameraContainer","styled","div","active","CameraName","CamerasListItem","camera","onClick","title","facilities","FacilitySelect","useRecoilState","activeFacilityIdState","selectedFacility","setSelectedFacility","showSearch","style","width","placeholder","onChange","value","map","facility","id","Option","activeCameraIdState","atom","key","default","undefined","notesListState","filtersState","filteredCurrentFacilityNotesListState","selector","get","filters","list","currentList","filter","note","severities","includes","severity","timeFrom","timeTo","time","CamerasListContainer","CamerasList","cameras","activeCameraId","setActiveCameraId","Object","entries","cam1","cam2","cam3","cam4","cam5","cam6","cam7","cam8","cam9","cam10","cam11","cam12","cam13","cam14","cam15","Cameras","Severities","values","FullWidthButton","Button","FiltersContent","onClose","setFilters","useSetRecoilState","useState","dateRangeFilter","setDateRangeFilter","setSeverities","direction","size","level","RangePicker","showTime","_","dateStrings","moment","Group","options","type","valueOf","Filters","visible","setVisible","content","placement","trigger","onVisibleChange","ToolbarContainer","Toolbar","HeaderWrapper","Header","InputWrapper","AddNotes","inputValue","setInputValue","setNotesList","activeFacility","useRecoilValue","icon","PlusOutlined","oldNotesList","randomSeveryty","Math","floor","random","text","Date","now","event","target","StyledCard","Card","AlignCenter","NotesListItem","NotesListWrapper","NotesList","notesList","NotesWrapper","Notes","WebRTCstreamWrapper","VideoStream","video","WebRTCstream","localStream","setLocalStream","error","setError","useEffect","navigator","mediaDevices","getUserMedia","then","stream","catch","e","String","getTracks","forEach","track","stop","autoPlay","ref","srcObject","MainWrapper","StyledHeader","Sidebar","MainContent","MainLayout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20fcf8cd.chunk.js","sourcesContent":["export enum SeveritiesEnum {\n  NotSignificant = 'Not Significant',\n  Medium = 'Medium',\n  Critical = 'Critical',\n}\n\nexport const Severities = Object.values(SeveritiesEnum);\n","import styled from 'styled-components';\nimport { ICamera } from '../../types/ICamera';\n\ninterface Props {\n  camera: ICamera;\n  active: boolean;\n  onClick: () => void;\n}\n\nconst CameraContainer = styled.div<{ active?: boolean }>`\n  height: 6.25rem;\n  min-width: 10rem;\n  border: 0.2rem solid #434343;\n  border-color: ${({ active }) => (active ? '#1890ff' : '#434343')};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 0.25rem;\n  cursor: pointer;\n`;\n\nconst CameraName = styled.div``;\n\nexport const CamerasListItem: React.FC<Props> = ({\n  camera,\n  onClick,\n  active,\n}) => {\n  return (\n    <CameraContainer onClick={onClick} active={active}>\n      <CameraName>{camera.title}</CameraName>\n    </CameraContainer>\n  );\n};\n","import { Select } from 'antd';\nimport { useRecoilState } from 'recoil';\nimport { activeFacilityIdState } from '../../state/atoms';\n\nexport const facilities = [\n  'FACILITY#1',\n  'FACILITY#2',\n  'FACILITY#3',\n  'FACILITY#4',\n  'FACILITY#5',\n  'FACILITY#6',\n  'FACILITY#7',\n];\n\nexport const FacilitySelect = () => {\n  const [selectedFacility, setSelectedFacility] = useRecoilState<string>(\n    activeFacilityIdState,\n  );\n\n  function handleChange(value: string) {\n    setSelectedFacility(value);\n  }\n\n  return (\n    <Select\n      showSearch\n      style={{ width: '100%' }}\n      placeholder=\"Select Facility\"\n      onChange={handleChange}\n      value={selectedFacility}\n    >\n      {facilities.map((facility, id) => (\n        <Select.Option key={id} value={facility}>\n          {facility}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n","import { atom, selector } from 'recoil';\nimport { facilities } from '../components/toolbar/FacilitySelect';\nimport { IFacility } from '../types/IFacility';\nimport { IFilters } from '../types/IFilters';\nimport { INote } from '../types/INote';\n\nexport const activeCameraIdState = atom<string | undefined>({\n  key: 'activeCameraIdState',\n  default: undefined,\n});\n\nexport const activeFacilityIdState = atom<IFacility>({\n  key: 'activeFacilityIdState',\n  default: facilities[0],\n});\n\nexport const notesListState = atom<Record<IFacility, INote[]> | undefined>({\n  key: 'notesListState',\n  default: undefined,\n});\n\nexport const filtersState = atom<IFilters | undefined>({\n  key: 'filtersState',\n  default: undefined,\n});\n\nexport const filteredCurrentFacilityNotesListState = selector({\n  key: 'filteredCurrentFacilityNotesListState',\n  get: ({ get }) => {\n    const filters = get(filtersState);\n    const facility = get(activeFacilityIdState);\n    const list = get(notesListState);\n\n    const currentList = list ? list[facility] : undefined;\n\n    return currentList?.filter((note) => {\n      if (filters?.severities && !filters?.severities.includes(note.severity)) {\n        return false;\n      }\n      if (filters?.timeFrom && filters?.timeTo) {\n        if (note.time > filters.timeTo || note.time < filters.timeFrom) {\n          return false;\n        }\n      }\n      return true;\n    });\n  },\n});\n","import { ICameras } from '../../types/ICamera';\nimport { CamerasListItem } from './CamerasListItem';\nimport styled from 'styled-components';\nimport { useRecoilState } from 'recoil';\nimport { activeCameraIdState } from '../../state/atoms';\n\ninterface Props {\n  cameras: ICameras;\n}\n\nconst CamerasListContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  overflow: auto;\n`;\n\nexport const CamerasList = ({ cameras }: Props) => {\n  const [activeCameraId, setActiveCameraId] =\n    useRecoilState(activeCameraIdState);\n\n  return (\n    <CamerasListContainer>\n      {Object.entries(cameras).map(([id, camera]) => {\n        return (\n          <CamerasListItem\n            key={id}\n            camera={camera}\n            onClick={() => {\n              setActiveCameraId(id);\n            }}\n            active={activeCameraId === id}\n          />\n        );\n      })}\n    </CamerasListContainer>\n  );\n};\n","import { ICameras } from '../../types/ICamera';\nimport { CamerasList } from './CamerasList';\n\nconst cameras: ICameras = {\n  cam1: { title: 'CAM#1' },\n  cam2: { title: 'CAM#2' },\n  cam3: { title: 'CAM#3' },\n  cam4: { title: 'CAM#4' },\n  cam5: { title: 'CAM#5' },\n  cam6: { title: 'CAM#6' },\n  cam7: { title: 'CAM#7' },\n  cam8: { title: 'CAM#8' },\n  cam9: { title: 'CAM#9' },\n  cam10: { title: 'CAM#10' },\n  cam11: { title: 'CAM#11' },\n  cam12: { title: 'CAM#12' },\n  cam13: { title: 'CAM#13' },\n  cam14: { title: 'CAM#14' },\n  cam15: { title: 'CAM#15' },\n};\n\nexport const Cameras = () => {\n  return <CamerasList cameras={cameras} />;\n};\n","import { Button, Checkbox, Popover, Space } from 'antd';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport { DatePicker } from 'antd';\nimport Title from 'antd/lib/typography/Title';\nimport moment, { Moment } from 'moment';\nimport { useSetRecoilState } from 'recoil';\nimport { filtersState } from '../../state/atoms';\nimport { Severities, SeveritiesEnum } from '../../constants';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\n\nconst FullWidthButton = styled(Button)`\n  width: 100%;\n`;\n\ninterface FiltersContentProps {\n  onClose: () => void;\n}\n\nconst FiltersContent = ({ onClose }: FiltersContentProps) => {\n  const setFilters = useSetRecoilState(filtersState);\n  const [dateRangeFilter, setDateRangeFilter] = useState<[Moment, Moment]>();\n  const [severities, setSeverities] = useState<SeveritiesEnum[]>();\n\n  const handleDateRangeChange = (_: any, dateStrings: [string, string]) => {\n    setDateRangeFilter([moment(dateStrings[0]), moment(dateStrings[1])]);\n  };\n\n  const handleSeverityChange = (severities: CheckboxValueType[]) => {\n    setSeverities(severities as SeveritiesEnum[]);\n  };\n\n  const applyFilters = () => {\n    setFilters({\n      timeFrom: dateRangeFilter && moment(dateRangeFilter[0]).valueOf(),\n      timeTo: dateRangeFilter && moment(dateRangeFilter[1]).valueOf(),\n      severities,\n    });\n    onClose();\n  };\n\n  const clearFilters = () => {\n    setFilters(undefined);\n    setDateRangeFilter(undefined);\n    setSeverities(undefined);\n    onClose();\n  };\n\n  return (\n    <Space direction=\"vertical\" size={12}>\n      <Title level={2}>Time</Title>\n      <DatePicker.RangePicker\n        showTime\n        value={dateRangeFilter}\n        onChange={handleDateRangeChange}\n      />\n      <Title level={2}>Severity</Title>\n      <Checkbox.Group\n        options={Severities}\n        onChange={handleSeverityChange}\n        value={severities}\n      />\n      <FullWidthButton type=\"primary\" onClick={applyFilters}>\n        APPLY\n      </FullWidthButton>\n      <FullWidthButton onClick={clearFilters}>Clear</FullWidthButton>\n    </Space>\n  );\n};\n\nexport const Filters = () => {\n  const [visible, setVisible] = useState(false);\n\n  const handleVisibleChange = (visible: boolean) => {\n    setVisible(visible);\n  };\n\n  const hide = () => {\n    setVisible(false);\n  };\n\n  return (\n    <Popover\n      content={<FiltersContent onClose={hide} />}\n      placement=\"bottomLeft\"\n      trigger=\"click\"\n      visible={visible}\n      onVisibleChange={handleVisibleChange}\n    >\n      <FullWidthButton>FEED FILTERS</FullWidthButton>\n    </Popover>\n  );\n};\n","import styled from 'styled-components';\nimport { FacilitySelect } from './FacilitySelect';\nimport { Filters } from './Filters';\n\nconst ToolbarContainer = styled.div`\n  width: 30rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport const Toolbar = () => {\n  return (\n    <ToolbarContainer>\n      <FacilitySelect />\n      <Filters />\n    </ToolbarContainer>\n  );\n};\n","import styled from 'styled-components';\nimport { Cameras } from './cameras/Cameras';\nimport { Toolbar } from './toolbar/Toolbar';\n\nconst HeaderWrapper = styled.div`\n  display: flex;\n  padding: 1rem 0;\n  gap: 1rem;\n  border-bottom: 0.125rem solid #434343;\n`;\n\nexport const Header = () => {\n  return (\n    <HeaderWrapper>\n      <Toolbar />\n      <Cameras />\n    </HeaderWrapper>\n  );\n};\n","import { useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { activeFacilityIdState, notesListState } from '../../state/atoms';\nimport { Button, Input } from 'antd';\nimport styled from 'styled-components';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { Severities } from '../../constants';\n\n// utility for creating unique Id\nlet id = 1;\nconst getId = () => {\n  return id++;\n};\n\nconst InputWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const AddNotes = () => {\n  const [inputValue, setInputValue] = useState('');\n  const setNotesList = useSetRecoilState(notesListState);\n  const activeFacility = useRecoilValue(activeFacilityIdState);\n\n  const addItem = () => {\n    setNotesList((oldNotesList) => {\n      const randomSeveryty = Severities[Math.floor(Math.random() * 3)];\n\n      return {\n        ...oldNotesList,\n        [activeFacility]: [\n          ...(oldNotesList && oldNotesList[activeFacility]\n            ? oldNotesList[activeFacility]\n            : []),\n          {\n            id: getId(),\n            text: inputValue,\n            severity: randomSeveryty,\n            time: Date.now(),\n          },\n        ],\n      };\n    });\n    setInputValue('');\n  };\n\n  const onChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  return (\n    <InputWrapper>\n      <Button type=\"primary\" icon={<PlusOutlined />} onClick={addItem} />\n      <Input\n        placeholder=\"Add your notes here\"\n        value={inputValue}\n        onChange={onChange}\n      />\n    </InputWrapper>\n  );\n};\n","import { Card } from 'antd';\nimport styled from 'styled-components';\nimport { INote } from '../../types/INote';\n\ninterface Props {\n  note: INote;\n}\n\nconst StyledCard = styled(Card)`\n  border: 0.125rem solid #434343;\n  border-radius: 0.5rem;\n  width: 100%;\n`;\n\nconst AlignCenter = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const NotesListItem = ({ note }: Props) => {\n  return (\n    <StyledCard title={<AlignCenter>{`Note#${note.id}`}</AlignCenter>}>\n      <AlignCenter>\n        <p>\n          <b>Notes: </b>\n          {note.text}\n        </p>\n        <p>\n          <b>Severity: </b>\n          {note.severity}\n        </p>\n        <p>\n          <b>Time: </b>\n          {note.time}\n        </p>\n      </AlignCenter>\n    </StyledCard>\n  );\n};\n","import { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { filteredCurrentFacilityNotesListState } from '../../state/atoms';\nimport { NotesListItem } from './NotesListItem';\n\nconst NotesListWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  gap: 1rem;\n`;\n\nexport const NotesList = () => {\n  const notesList = useRecoilValue(filteredCurrentFacilityNotesListState);\n\n  return (\n    <NotesListWrapper>\n      {notesList?.map((note) => (\n        <NotesListItem key={note.id} note={note} />\n      ))}\n    </NotesListWrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { AddNotes } from './AddNotes';\nimport { NotesList } from './NotesList';\n\nconst NotesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: space-between;\n  width: 100%;\n  border-right: 0.125rem solid #434343;\n  padding: 0.5rem;\n`;\n\nexport const Notes = () => {\n  return (\n    <NotesWrapper>\n      <NotesList />\n      <AddNotes />\n    </NotesWrapper>\n  );\n};\n","import Title from 'antd/lib/typography/Title';\nimport { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { activeCameraIdState } from '../state/atoms';\n\nconst WebRTCstreamWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst VideoStream = styled.video`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const WebRTCstream = () => {\n  const activeCameraId = useRecoilValue(activeCameraIdState);\n  const [localStream, setLocalStream] = useState<MediaStream>();\n  const [error, setError] = useState<string>();\n\n  useEffect(() => {\n    if (!localStream) {\n      navigator.mediaDevices\n        .getUserMedia({\n          //   audio: true,\n          video: true,\n        })\n        .then((stream) => {\n          setLocalStream(stream);\n        })\n        .catch((e) => setError(String(e)));\n    }\n\n    return () => {\n      localStream?.getTracks().forEach((track) => {\n        track.stop();\n      });\n    };\n  }, [localStream]);\n\n  if (!activeCameraId) {\n    return (\n      <WebRTCstreamWrapper>\n        <Title level={1}>No camera selected!</Title>\n      </WebRTCstreamWrapper>\n    );\n  }\n\n  return (\n    <WebRTCstreamWrapper>\n      {error && error}\n      {localStream && (\n        <VideoStream\n          autoPlay\n          ref={(video) => {\n            if (video) {\n              video.srcObject = localStream;\n            }\n          }}\n        />\n      )}\n    </WebRTCstreamWrapper>\n  );\n};\n","import { FC } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport { Header } from './components/Header';\nimport { Notes } from './components/notes/Notes';\nimport { RecoilRoot } from 'recoil';\nimport { WebRTCstream } from './components/WebRTCstream';\n\nconst MainWrapper = styled.div`\n  height: 100vh;\n  padding: 0 1rem;\n`;\n\nconst StyledHeader = styled.div`\n  /* height: 10rem; */\n`;\n\nconst Sidebar = styled.div`\n  width: 30rem;\n`;\n\nconst MainContent = styled.div`\n  width: 100%;\n`;\n\nconst MainLayout = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: calc(100vh - 10rem);\n`;\n\nconst App: FC = () => (\n  <RecoilRoot>\n    <MainWrapper>\n      <StyledHeader>\n        <Header />\n      </StyledHeader>\n      <MainLayout>\n        <Sidebar>\n          <Notes />\n        </Sidebar>\n        <MainContent>\n          <WebRTCstream />\n        </MainContent>\n      </MainLayout>\n    </MainWrapper>\n  </RecoilRoot>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}